AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 3
    Runtime: nodejs8.10
    Environment:
      Variables:
        DYNAMO_TABLE: !Ref postsTable
        SNS_TOPIC: !Ref SnsTopic
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  SrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  
  AudioBucket:
    Type: AWS::S3::Bucket
  
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SrcBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${SrcBucket}/*

  NewPostLambda:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: './dist'
      Handler: index.newPostLambda
      Role: !GetAtt MyLambdaRole.Arn
      Events:
        Api1:
          Type: Api 
          Properties:
            Path: /api
            Method: post
  
  AudioConverterLambda:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: './dist'
      Handler: index.audioConverterLambda
      Role: !GetAtt MyLambdaRole.Arn
      Policies:
        - AWSLambdaExecute
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic:
              Ref: SnsTopic
  
  postsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: postsTable
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  SnsTopic:
    Type: AWS::SNS::Topic
  
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Action:
            - "sts:AssumeRole"
          Principal:
            Service:
              - "lambda.amazonaws.com"
              - "sns.amazonaws.com"
              - "apigateway.amazonaws.com"
  
  MyLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [MyLambdaRole]
    Properties:
      PolicyName: MyLambdaPolicy
      Roles: [!Ref MyLambdaRole]
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "polly:SynthesizeSpeech",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "sns:Publish",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:GetBucketLocation",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ]
          Resource: [
            # !GetAtt postsTable.Arn,
            # !GetAtt AudioBucket.Arn,
            # !Ref SnsTopic,
            '*'
          ]

Outputs:
  # HelloWorldApi:
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  WebsiteURL:
    Value: !GetAtt SrcBucket.WebsiteURL