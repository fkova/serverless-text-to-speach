AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs8.10
    Environment:
      Variables:
        DYNAMO_TABLE:
          Ref: postsTable
        SNS_TOPIC:
          Ref: SnsTopic
        BUCKET_NAME:
          Ref: AudioBucket
  Api:
    Cors:
      AllowMethods: '''*'''
      AllowHeaders: '''*'''
      AllowOrigin: '''*'''
Resources:
  SrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  AudioBucket:
    Type: AWS::S3::Bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: SrcBucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SrcBucket}/*
  NewPostLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://rahzel-package/83e62fffca9926e23f390098666b784a
      Handler: index.newPostLambda
      Role:
        Fn::GetAtt:
        - MyLambdaRole
        - Arn
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /api
            Method: post
  GetPostLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://rahzel-package/83e62fffca9926e23f390098666b784a
      Handler: index.getPostLambda
      Role:
        Fn::GetAtt:
        - MyLambdaRole
        - Arn
      Events:
        Api2:
          Type: Api
          Properties:
            Path: /api/{id}
            Method: get
  AudioConverterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://rahzel-package/83e62fffca9926e23f390098666b784a
      Handler: index.audioConverterLambda
      Role:
        Fn::GetAtt:
        - MyLambdaRole
        - Arn
      Policies:
      - AWSLambdaExecute
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic:
              Ref: SnsTopic
  postsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: postsTable
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  SnsTopic:
    Type: AWS::SNS::Topic
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
            - sns.amazonaws.com
            - apigateway.amazonaws.com
  MyLambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
    - MyLambdaRole
    Properties:
      PolicyName: MyLambdaPolicy
      Roles:
      - Ref: MyLambdaRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - polly:SynthesizeSpeech
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - sns:Publish
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:GetBucketLocation
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::GetAtt:
            - postsTable
            - Arn
          - Fn::GetAtt:
            - AudioBucket
            - Arn
          - Ref: SnsTopic
          - arn:aws:logs:*:*:*
          - '*'
Outputs:
  WebsiteURL:
    Value:
      Fn::GetAtt:
      - SrcBucket
      - WebsiteURL
